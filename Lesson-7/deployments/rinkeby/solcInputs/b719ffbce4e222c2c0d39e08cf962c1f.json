{
    "language": "Solidity",
    "sources": {
        "contracts/FundMe.sol": {
            "content": "// SPDX-License-Identifier: SEE LICENSE IN LICENSE\npragma solidity ^0.8.0;\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"./PriceConverter.sol\";\n\n//error FundMe__NotOwner();\n\ncontract FundMe {\n    //Type Declaration-\n    using PriceConverter for uint256;\n\n    //State variables-\n    uint256 public constant MIN_USD = 50 * 10**18;\n    address[] public funders; //array of all the addresses of the sender's\n    mapping(address => uint256) public addressToAmountFunded; //see which address has funded how much\n    address public immutable i_owner;\n    //Parameterizing the priceFeed address and passing it in with the constructor\n    //that gets saved as a global variable to an AggregatorV3Interface type\n\n    //or passing it to the getConversionRate() function which passes it\n    //to the getPrice() function which then calls the latestrounddata\n\n    AggregatorV3Interface private priceFeed;\n\n    //events -none\n    //modifier-\n    // modifier onlyOwner(){\n    //     if(msg.sender != i_owner) revert FundMe__NotOwner();\n    //     _;\n    // }\n\n    constructor(address priceFeedAddress) {\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n        i_owner = msg.sender;\n    }\n\n    function fund() public payable {\n        require( //passes msg.value in getConversion function\n            msg.value.getConversionRate(priceFeed) >= MIN_USD,\n            \"Didn't send enough!\"\n        );\n        addressToAmountFunded[msg.sender] += msg.value;\n        funders.push(msg.sender);\n    }\n\n    function withdraw() public {\n        for (uint256 i = 0; i < funders.length; i++) {\n            address funderadd = funders[i];\n            addressToAmountFunded[funderadd] = 0;\n        }\n\n        funders = new address[](0);\n        //Transfer vs send vs call\n        (bool callSuccess, ) = i_owner.call{value: address(this).balance}(\"\");\n        require(callSuccess);\n    }\n\n    function cheaperWithdraw() public payable {\n        address[] memory funders = funders;\n        // mappings can't be in memory, sorry!\n        for (\n            uint256 funderIndex = 0;\n            funderIndex < funders.length;\n            funderIndex++\n        ) {\n            address funder = funders[funderIndex];\n            addressToAmountFunded[funder] = 0;\n        }\n        funders = new address[](0);\n        // payable(msg.sender).transfer(address(this).balance);\n        (bool success, ) = i_owner.call{value: address(this).balance}(\"\");\n        require(success);\n    }\n\n    /** @notice Gets the amount that an address has funded\n     *  @param fundingAddress the address of the funder\n     *  @return the amount funded\n     */\n    function getAddressToAmountFunded(address fundingAddress)\n        public\n        view\n        returns (uint256)\n    {\n        return addressToAmountFunded[fundingAddress];\n    }\n\n    function getVersion() public view returns (uint256) {\n        return priceFeed.version();\n    }\n\n    function getFunder(uint256 index) public view returns (address) {\n        return funders[index];\n    }\n\n    function getOwner() public view returns (address) {\n        return i_owner;\n    }\n\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\n        return priceFeed;\n    }\n}"
        },
        "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
        },
        "contracts/PriceConverter.sol": {
            "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\nlibrary PriceConverter {\r\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) {\r\n        (, int256 price, , , ) = priceFeed.latestRoundData(); //eth in terms of usd; has 8 decimals\r\n        return uint256(price * 1e10);\r\n    }\r\n\r\n    function getConversionRate(uint256 ethAmount,AggregatorV3Interface priceFeed)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 ethPrice = getPrice(priceFeed);\r\n        uint256 ethAmountInUSD = (ethPrice * ethAmount) / 1e18;\r\n        return ethAmountInUSD;\r\n    }\r\n}\r\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": false,
            "runs": 200
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers",
                    "metadata",
                    "devdoc",
                    "userdoc",
                    "storageLayout",
                    "evm.gasEstimates"
                ],
                "": ["ast"]
            }
        },
        "metadata": {
            "useLiteralContent": true
        }
    }
}

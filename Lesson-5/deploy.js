//http://127.0.0.1:7545
const ethers = require("ethers");
const fs = require("fs");

async function main() {
    //connection to the blockchain 
    const provider = new ethers.providers.JsonRpcProvider("http://172.31.224.1:7545"); //connection with ganache
    const wallet = new ethers.Wallet("36c720e13cee32ad6673c6a0e5fc52c44c16a2255e90e512d3ecfbcc67e1c6d8", provider); //private key of an account the ganache account
    const abi = fs.readFileSync("./SimpleStorage_sol_SimpleStorage.abi", "utf8"); // sync because we have to wait for that file to update
    const binary = fs.readFileSync("./SimpleStorage_sol_SimpleStorage.bin", "utf8");
    const nonce = await wallet.getTransactionCount();

    //in ethers, a CONTRACT FACTORY is just an object that you can use to deploy contracts 
    const contractFactory = new ethers.ContractFactory(abi, binary, wallet);
    console.log("Deploying, please wait .....");
    const contract = await contractFactory.deploy(); // wait for the contract to deploy
    //console.log(contract);
    const transactionReceipt = await contract.deployTransaction.wait(1); //wait one bloc for confirmation that the contract is added to the chain

    // console.log(" Here is the deployment transaction: "); //transaction response is something you get initially
    // console.log(contract.deployTransaction);
    // console.log(" Here is the transaction receipt: ");
    // console.log(transactionReceipt); //now you'll only get a transaction receipt when you wait for the transaction to finish

    //     console.log("Let's deploy with only transaction data: ");
    //     const tx = {
    //         nonce: nonce,
    //         gasPrice: 20000000000,
    //         gasLimit: 1000000,
    //         to: null,
    //         value: 1,
    //         data: "0x608060405234801561001057600080fd5b5061080f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80630d3de88d1461005c5780632e64cec1146100785780636057361d1461009657806364c21ca4146100b25780638a4bf52c146100e3575b600080fd5b6100766004803603810190610071919061042a565b610113565b005b6100806101a3565b60405161008d9190610543565b60405180910390f35b6100b060048036038101906100ab9190610486565b6101ac565b005b6100cc60048036038101906100c79190610486565b6101cf565b6040516100da92919061055e565b60405180910390f35b6100fd60048036038101906100f891906103e1565b61028b565b60405161010a9190610543565b60405180910390f35b600260405180604001604052808381526020018481525090806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010190805190602001906101799291906102b9565b5050508060018360405161018d919061052c565b9081526020016040518091039020819055505050565b60008054905090565b8060008190555060016000808282546101c5919061060b565b9250508190555050565b600281815481106101df57600080fd5b9060005260206000209060020201600091509050806000015490806001018054610208906106ad565b80601f0160208091040260200160405190810160405280929190818152602001828054610234906106ad565b80156102815780601f1061025657610100808354040283529160200191610281565b820191906000526020600020905b81548152906001019060200180831161026457829003601f168201915b5050505050905082565b6001818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b8280546102c5906106ad565b90600052602060002090601f0160209004810192826102e7576000855561032e565b82601f1061030057805160ff191683800117855561032e565b8280016001018555821561032e579182015b8281111561032d578251825591602001919060010190610312565b5b50905061033b919061033f565b5090565b5b80821115610358576000816000905550600101610340565b5090565b600061036f61036a846105b3565b61058e565b90508281526020810184848401111561038b5761038a6107a2565b5b61039684828561066b565b509392505050565b600082601f8301126103b3576103b261079d565b5b81356103c384826020860161035c565b91505092915050565b6000813590506103db816107c2565b92915050565b6000602082840312156103f7576103f66107ac565b5b600082013567ffffffffffffffff811115610415576104146107a7565b5b6104218482850161039e565b91505092915050565b60008060408385031215610441576104406107ac565b5b600083013567ffffffffffffffff81111561045f5761045e6107a7565b5b61046b8582860161039e565b925050602061047c858286016103cc565b9150509250929050565b60006020828403121561049c5761049b6107ac565b5b60006104aa848285016103cc565b91505092915050565b60006104be826105e4565b6104c881856105ef565b93506104d881856020860161067a565b6104e1816107b1565b840191505092915050565b60006104f7826105e4565b6105018185610600565b935061051181856020860161067a565b80840191505092915050565b61052681610661565b82525050565b600061053882846104ec565b915081905092915050565b6000602082019050610558600083018461051d565b92915050565b6000604082019050610573600083018561051d565b818103602083015261058581846104b3565b90509392505050565b60006105986105a9565b90506105a482826106df565b919050565b6000604051905090565b600067ffffffffffffffff8211156105ce576105cd61076e565b5b6105d7826107b1565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600061061682610661565b915061062183610661565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561065657610655610710565b5b828201905092915050565b6000819050919050565b82818337600083830152505050565b60005b8381101561069857808201518184015260208101905061067d565b838111156106a7576000848401525b50505050565b600060028204905060018216806106c557607f821691505b602082108114156106d9576106d861073f565b5b50919050565b6106e8826107b1565b810181811067ffffffffffffffff821117156107075761070661076e565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b6107cb81610661565b81146107d657600080fd5b5056fea264697066735822122020db615d43a79f6c1ee2480aeb66c3ef4bbe08b55bbc11968c89d1216fa316a864736f6c63430008070033",
    //         chainId: 5777

    //     };
    //     // // this signs the transaction doesn't send it
    //     // const signedTxResponse = await wallet.signTransaction(tx);
    //     // console.log(signedTxResponse);

    //     const sentTxResponse = await wallet.sendTransaction(tx);
    //     await sentTxResponse.wait(1);
    //     console.log(sentTxResponse);
    // 

    const currentFavNum = await contract.retrieve();
    console.log(currentFavNum);
}


main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error(error);
        process.exit(1);
    });
